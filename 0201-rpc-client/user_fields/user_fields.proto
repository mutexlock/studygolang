syntax = "proto3";
package user_fields;
option php_namespace = "Passport\\UserFields";
option php_metadata_namespace = "Passport\\UserFields";
option php_generic_services = true;
//
//  可以在一个member_id下存储任意多的key-value对，且value可以是二维的map
//  允许通过操作符.获取二级值, 如 a.b 表示a项目下的b子项
//

//  ** 但基于qukan项目的数据库，接口使用上会有如下限制：**
//
//  1. 数据存储在member 和 member_info两个表中
//  2. 获取或者设置的字段名在任何一个表中存在的，字段名对应的就是数据库的列名
//  3. 获取或者设置的字段名在任何一个表中不存在的，字段名对应的就是member_info中，info字段存储的json的key
//  4. 由于 member 和 member_info有重名字段(telphone, info)，在字段后面加数字1表示获取的是member_info中的字段
//  5. 只有 info 和 info1 两个字段允许获取和设置其子项, info.ua

service UserFields {
    // 查询用户属性
    rpc GetFields (GetFieldsRequest) returns (GetFieldsReply);
    // 查询多个用户属性
    rpc GetMembersFields (GetMembersFieldsRequest) returns (GetMembersFieldsReply);

    // 更新指定用户属性
    rpc UpdateFields (UpdateFieldsRequest) returns (UpdateFieldsReply);

    // 更新指定用户通过json
    rpc UpdateFieldsByJson(UpdateFieldsByJsonReq) returns (UpdateFieldsReply);
    rpc GetFieldsByJson(GetFieldsByJsonReq) returns (GetFieldsByJsonResp);

    rpc UpdateFieldsByUid(UpdateFieldsByUidReq) returns (UpdateFieldsReply);
    rpc GetFieldsByUid(GetFieldsByUidReq) returns (GetFieldsByUidResp);
    rpc BatchGetFieldsByUid(BatchGetFieldsByUidReq) returns (BatchGetFieldsByUidResp);
    rpc InsertFieldsByUid(InsertFieldsByUidReq) returns (InsertFieldsByUidResp);
}

message UpdateFieldsByUidReq {
    string memberId = 1;
    string appName = 2;
    string jsonVal = 3;
}

message GetFieldsByUidReq {
    string memberId = 1;
    string appName = 2;
    repeated string fields = 3;
}

message GetFieldsByUidResp {
    string memberId = 1;
    string appName = 2;
    string jsonVal = 3;
}

message BatchGetFieldsByUidReq {
    repeated int64 memberIds = 1;
    string appName = 2;
    repeated string fields = 3;
}

message BatchGetFieldsByUidResp {
    string appName = 1;
    string jsonVal = 2;
}

message InsertFieldsByUidReq {
    string appName = 1;
    string jsonVal = 2;
}

message InsertFieldsByUidResp{

}

message UpdateFieldsByJsonReq {
    int64 memberId = 1;
    string jsonVal = 2;
}

message GetFieldsByJsonReq {
    int64 memberId = 1;
    repeated string fields = 2;
}

message GetFieldsByJsonResp {
    int64 memberId = 1;
    string jsonVal = 2;
}


enum ErrorCode{
    OK = 0;

    INVALID_ARGUMENT = 40000;         // 参数错误

    ACCOUNT_NOT_EXIST = 40004;        // 帐号不存在

    SYSTEM_ERROR = 50000;             // 系统异常

}


message GetFieldsRequest{
    string memberId = 1;
    // 指定需要获取的key
    // 支持两级目录
    // 如可以 a.b 表示获取a字段下的key为b的值
    repeated string name = 2;
}

message GetFieldsReply{
    // 查询到的key和值
    map<string, string> values = 1;
}

message UpdateFieldsRequest{
    string memberId = 1;
    // 需要更新的key和value
    map<string, string> values = 2;
}

message UpdateFieldsReply{

}

message GetMembersFieldsRequest{
    repeated string memberId = 1;
    // 指定需要获取的key
    // 支持两级目录
    // 如可以 a.b 表示获取a字段下的key为b的值
    repeated string name = 2;
}

message GetMembersFieldsReply{
    // 查询到的key和值
    map<string, GetFieldsReply> values = 1;
}